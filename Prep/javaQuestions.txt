Questions:
1. Longest Substring Without Repeating Characters
https://lnkd.in/g6vmvQDa

hashtag#Java
1. what is enum class? what is the difference between constant class and enum?
ans:An enum is a type that represents a group of named constants. It is used when you have a fixed set of related constants, such as days of the week, directions, states, etc.
In Java, an enum is defined using the enum keyword.
public enum Day {
    SUNDAY,
    MONDAY,
    TUESDAY,
    WEDNESDAY,
    THURSDAY,
    FRIDAY,
    SATURDAY
}

A constant class is a regular class where constants are defined as public static final fields. These constants are typically grouped together in a class for better organization and reusability.

Difference Between enum and Constant Class:
Feature	enum	Constant Class
Type-Safety	Provides type safety	Does not provide type safety
Fixed Set of Values	Represents a fixed set of values	Can represent any value, not necessarily a fixed set
Behavior	Can have methods, fields, constructors	Typically only holds constant values
Usage in Switch	Can be used in switch statements	Cannot be directly used in switch
Methods	Implicit methods like values(), ordinal()	No implicit methods; only user-defined methods
Instance Count	Each enum constant is a singleton	Constants can have multiple instances of the same value

2. If unique values needs to be stored and insertion order has to be maintained then which data structure can be used? Can I achieve the same using treemap?

ans:If you need to store unique values and maintain insertion order, the best data structure to use in Java is a LinkedHashSet.

Why LinkedHashSet?
Uniqueness: A LinkedHashSet only stores unique elements (no duplicates).
Insertion Order: Unlike a regular HashSet, LinkedHashSet maintains the insertion order. This means that elements will be iterated in the same order in which they were inserted.
import java.util.LinkedHashSet;

public class LinkedHashSetExample {
    public static void main(String[] args) {
        LinkedHashSet<String> set = new LinkedHashSet<>();

        set.add("apple");
        set.add("banana");
        set.add("cherry");
        set.add("apple");  // Duplicate, will not be added

        System.out.println(set);  // Output: [apple, banana, cherry]
    }
}

Can I Achieve the Same Using TreeMap?
No, a TreeMap does not maintain insertion order. Instead, it maintains the natural ordering of the keys (or according to a comparator if provided).

TreeMap stores key-value pairs and ensures that keys are unique, but the order of the keys is determined by their natural order (e.g., lexicographical order for strings or numerical order for numbers), not by the order in which they were inserted.


3. What is Stream Api?
ans:The Stream API in Java was introduced in Java 8 and is part of the java.util.stream package.
 It provides a functional-style approach to processing sequences of elements, making it easier to work with collections (like List, Set, etc.)
 by allowing declarative operations such as filtering, mapping, and reducing data.

Streams are designed to work with data in a more flexible and readable way compared to traditional iteration and manipulation methods. 
They also allow for parallel execution of operations, which can improve performance in multi-core systems.
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class StreamExample {
    public static void main(String[] args) {
        List<String> names = Arrays.asList("John", "Jane", "Jack", "Doe", "John");

        // Filter and collect unique names that start with 'J'
        List<String> filteredNames = names.stream()
            .filter(name -> name.startsWith("J"))
            .distinct()     // Remove duplicates
            .sorted()       // Sort alphabetically
            .collect(Collectors.toList());

        System.out.println(filteredNames);  // Output: [Jack, Jane, John]
    }
}

4. Given a list of employees, sort it based on name of the employee using stream API
ans:import java.util.*;
import java.util.stream.Collectors;

class Employee {
    private String name;
    private int id;

    // Constructor
    public Employee(String name, int id) {
        this.name = name;
        this.id = id;
    }

    // Getters
    public String getName() {
        return name;
    }

    public int getId() {
        return id;
    }

    // ToString method to print employee details
    @Override
    public String toString() {
        return "Employee{" +
                "name='" + name + '\'' +
                ", id=" + id +
                '}';
    }
}

public class EmployeeSortExample {

    public static void main(String[] args) {
        // Sample list of employees
        List<Employee> employees = Arrays.asList(
            new Employee("John", 101),
            new Employee("Jane", 102),
            new Employee("Mike", 103),
            new Employee("Alice", 104),
            new Employee("Bob", 105)
        );

        // Sort employees by name using Stream API
        List<Employee> sortedEmployees = employees.stream()
            .sorted(Comparator.comparing(Employee::getName))  // Sort by name
            .collect(Collectors.toList());                    // Collect sorted result as a list

        // Print the sorted list of employees
        sortedEmployees.forEach(System.out::println);
    }
}

5. Given a list of employee, get the employee with highest salary using stream API
ans:
import java.util.*;
import java.util.stream.*;

class Employee {
    private String name;
    private int id;
    private double salary;

    // Constructor
    public Employee(String name, int id, double salary) {
        this.name = name;
        this.id = id;
        this.salary = salary;
    }

    // Getters
    public String getName() {
        return name;
    }

    public int getId() {
        return id;
    }

    public double getSalary() {
        return salary;
    }

    // ToString method to print employee details
    @Override
    public String toString() {
        return "Employee{" +
                "name='" + name + '\'' +
                ", id=" + id +
                ", salary=" + salary +
                '}';
    }
}

public class HighestSalaryExample {

    public static void main(String[] args) {
        // Sample list of employees
        List<Employee> employees = Arrays.asList(
            new Employee("John", 101, 60000),
            new Employee("Jane", 102, 75000),
            new Employee("Mike", 103, 82000),
            new Employee("Alice", 104, 65000),
            new Employee("Bob", 105, 80000)
        );

        // Find the employee with the highest salary using Stream API
        Optional<Employee> highestPaidEmployee = employees.stream()
            .max(Comparator.comparingDouble(Employee::getSalary));  // Compare by salary

        // Check if the result is present and print the employee with the highest salary
        highestPaidEmployee.ifPresent(employee -> System.out.println("Highest Paid Employee: " + employee));
    }
}


hashtag#Spring
1. What is Path variable in spring. Difference in get and post api call specifically for path variable. 
ans:@PathVariable annotation is used to extract values from the URI (Uniform Resource Identifier) path
 of a request and bind them to method parameters in a controller.
 It allows you to define dynamic URLs that can pass variables directly in the path rather than as query parameters.

2. How to pass multiple path variables in post url?
ans:In a Spring Boot application, you can pass multiple path variables in the URL for a POST request by using the @PathVariable annotation for each variable.
@RestController
@RequestMapping("/employees")
public class EmployeeController {

    @PostMapping("/{departmentId}/{roleId}")
    public Employee createEmployee(
            @PathVariable int departmentId,
            @PathVariable int roleId,
            @RequestBody Employee employee) {
        // Logic to create a new employee under the specific department and role
        return employeeService.createEmployee(departmentId, roleId, employee);
    }
}

3. How to implement OneToMany and ManyToOne reletionship in Spring.

1. Do you think string is a good choice for using it as a key to hash function? why?
Yes, strings are a good choice as keys for hash functions because they are immutable, ensuring consistent hash codes, and modern languages provide efficient hashing algorithms for strings. This makes them reliable and easy to use as identifiers in hash-based data structures like hash maps. 
However, performance can be impacted for very long strings, and handling collisions or case sensitivity is important

2. Why is String immutable in Java ? it's advantages and disadvantages of being immutable.

3. How do you compare two Strings in Java?
Use equals() for checking if two strings have the same content.
The equals() method compares the content of two String objects for equality. It returns true if the strings are equal and false otherwise.
Use equalsIgnoreCase() if you need a case-insensitive comparison.
Use compareTo() or compareToIgnoreCase() for lexicographical comparisons.
Avoid using == for content comparison; it's better suited for reference checks.
The == operator checks if two String references point to the same object, not if their contents are equal.
 This is generally not recommended for string comparison due to the potential for unexpected results.

4. What is the difference between `String`, `StringBuilder`, and `StringBuffer`?

5. How does the `intern()` method work in Java?
ans:The intern() method in Java returns a reference to a canonical representation of the String object. It checks if the String is already in the String Pool; if so, it returns the pooled reference; otherwise, it adds the String to the pool and returns the new reference. 
This helps to reduce memory usage by ensuring that only one instance of each unique String value exists.
public class StringInternExample {
    public static void main(String[] args) {
        String str1 = new String("hello");
        String str2 = new String("hello");

        // Without interning, str1 and str2 are different objects
        System.out.println(str1 == str2); // false

        // Interning the strings
        String str3 = str1.intern();
        String str4 = str2.intern();

        // After interning, str3 and str4 refer to the same object
        System.out.println(str3 == str4); // true
    }
}


6. What are the performance implications of String concatenation?
String concatenation can have performance implications due to the creation of multiple intermediate String objects.
ans:Using StringBuilder or StringBuffer is more efficient for concatenation in loops due to reduced object creation.

7. How can you convert a String to an integer in Java?
ans:String str = "123";
    int number = Integer.parseInt(str);
To convert a String to an int in Java, you can use the parseInt() method from the Integer 

8. Explain how to reverse a String in Java.
ans:public Static void main(String args[]){
String str="Java";
String reverseStr="";
for(int i=0;i<str.length();i++){
char ch=str.charAt(i);
reverseStr=ch+reverseStr;
}
sout(reverseStr);
}

9. What is the purpose of the `equals()` method in the String class?
ans:Content Comparison: The equals() method checks if two strings have the exact same characters in the same order.
Case-sensitive: The equals() method is case-sensitive, meaning "Java" and "java" would not be considered equal.
public class StringEqualsExample {
    public static void main(String[] args) {
        String str1 = "Hello";
        String str2 = "Hello";
        String str3 = "hello";
        
        // Using equals() to compare content of strings
        System.out.println(str1.equals(str2));  // Output: true (content is the same)
        System.out.println(str1.equals(str3));  // Output: false (case-sensitive)
    }
}
==: Compares references (memory locations) of the string objects, not the actual content.

10. How do you check if a String is a palindrome?
ans:
package Practices;

import java.util.Scanner;

public class reverse {
    public static void main(String[] args) {
        String str="ava";
        String reverseStr="";

         for(int i=0;i<str.length();i++){
             char ch=str.charAt(i);
             reverseStr=ch+reverseStr;

         }
         if(str.equals(reverseStr)){
             System.out.println("palindrome");
         }
         else {
             System.out.println("non palindrome");
         }
        System.out.println(reverseStr);
    }
}


11. What are common methods available in the String class?
ans:length(): Returns the length of the string.

String str = "hello";
int len = str.length(); // 5
charAt(int index): Returns the character at the specified index.
char ch = str.charAt(1); // 'e'
substring(int beginIndex, int endIndex): Returns a substring from the specified start index to end index.

String sub = str.substring(1, 4); // "ell"
Case Conversion
toUpperCase(): Converts the string to uppercase.

String upper = str.toUpperCase(); // "HELLO"
toLowerCase(): Converts the string to lowercase.

String lower = str.toLowerCase(); // "hello"
Searching
indexOf(String str): Returns the index of the first occurrence of the specified substring.

int index = str.indexOf("lo"); // 3
contains(CharSequence sequence): Checks if the string contains the specified sequence.
boolean contains = str.contains("ell"); // true
Trimming and Replacement
trim(): Removes leading and trailing whitespace.

String padded = "   hello   ";
String trimmed = padded.trim(); // "hello"
replace(CharSequence target, CharSequence replacement): Replaces occurrences of a specified substring with another substring.

String replaced = str.replace("l", "p"); // "heppo"
Comparison
equals(Object obj): Compares the string with another object for equality.

boolean isEqual = str.equals("hello"); // true
equalsIgnoreCase(String anotherString): Compares the string with another string, ignoring case differences.

boolean isEqualIgnoreCase = str.equalsIgnoreCase("HELLO"); // true
compareTo(String anotherString): Compares the string to another string lexicographically.

int comparison = str.compareTo("hello"); // 0
Conversion
toString(): Returns the string itself (inherited from Object).
String s = str.toString(); // "hello"
Splitting and Joining
split(String regex): Splits the string into an array of substrings based on the given regex.

String[] parts = "a,b,c".split(","); // ["a", "b", "c"]
join(CharSequence delimiter, CharSequence... elements): Joins the given elements into a single string with the specified delimiter.

String joined = String.join("-", "a", "b", "c"); // "a-b-c"

12. How can you remove whitespace from a String?
ans:By using replace()
String str = "  he llo  ";
String noSpaces = str.replace(" ", ""); // "hello"

13. Explain the difference between `==` and `equals()` when comparing Strings.

14. How can you find the first non-repeated character in a String?

15. What is the significance of the `StringBuilder` class?

16. How do you split a String into an array?

17. What is the maximum length of a String in Java?

18. How do you check if one String is a rotation of another?

19. Can you explain how to handle String encoding in Java?
1. What is the Stream API in Java 8, and how does it work?
2. What are the differences between the forEach() and collect() methods in the Stream API?
3. What is the purpose of the filter() method in the Stream API, and how can it be used?
4. What is the purpose of the map() method in the Stream API, and how can it be used?
5. What is the purpose of the reduce() method in the Stream API, and how can it be used?
6. What is the difference between sequential and parallel streams, and when should each be used?
7. What are some of the intermediate and terminal operations available in the Stream API, and how can they be used?
8. How does the Stream API handle null values and exceptions?
9. How can you create a Stream from a Collection, Array, or other data source?
ans:From a Collection: Use the stream() method.
import java.util.List;
import java.util.stream.Stream;

public class StreamExample {
    public static void main(String[] args) {
        List<String> list = List.of("a", "b", "c");
        Stream<String> stream = list.stream();
    }
}

From an Array: Use Arrays.stream() or Stream.of().
import java.util.Arrays;
import java.util.stream.Stream;

public class StreamExample {
    public static void main(String[] args) {
        String[] array = {"a", "b", "c"};
        
        // Using Arrays.stream()
        Stream<String> stream1 = Arrays.stream(array);
        
        // Using Stream.of()
        Stream<String> stream2 = Stream.of(array);
    }
}

From a Stream Builder: Use Stream.builder().
import java.util.stream.Stream;

public class StreamExample {
    public static void main(String[] args) {
        Stream<String> stream = Stream.<String>builder()
                                      .add("a")
                                      .add("b")
                                      .add("c")
                                      .build();
    }
}

Using Stream.generate() or Stream.iterate(): For custom or infinite streams.

10. Can you give an example of how you have used the Stream API in a real-world project?
ans:Suppose we are working on a project that involves processing a list of employee objects. 
We want to filter the employees based on their department, sort them by their salary, and then extract the names of the top 5 highest-paid employees.
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class StreamExample {
    public static void main(String[] args) {
        List<Employee> employees = Arrays.asList(
            new Employee("Alice", "Engineering", 90000),
            new Employee("Bob", "Marketing", 70000),
            new Employee("Charlie", "Engineering", 120000),
            new Employee("David", "Engineering", 110000),
            new Employee("Eve", "Marketing", 75000),
            new Employee("Frank", "HR", 80000),
            new Employee("Grace", "HR", 85000)
        );

        List<String> top5HighPaidEmployees = employees.stream()
            .filter(e -> "Engineering".equals(e.getDepartment())) // Filter by department
            .sorted((e1, e2) -> Double.compare(e2.getSalary(), e1.getSalary())) // Sort by salary in descending order
            .limit(5) // Limit to top 5
            .map(Employee::getName) // Extract names
            .collect(Collectors.toList()); // Collect results into a list

        System.out.println(top5HighPaidEmployees);
    }
}


hashtag#LambdaExpression:

1. What is a lambda expression?
2. How are lambda expressions used in Java?
3. What are the benefits of using lambda expressions?
4. How do lambda expressions differ from anonymous inner classes?
5. What is the syntax of a lambda expression?
6. What is the difference between a lambda expression and a method reference?
7. How are lambda expressions related to functional interfaces?
8. Can you provide an example of using a lambda expression to sort a collection of objects?
9. How does Java handle variable capture in lambda expressions?
10. What is the type of a lambda expression?

Go through the algorithm and code , and feel free to comment your thought/doubts.

hashtag#Problem: Path Sum II (https://lnkd.in/gkqRCi73)
hashtag#Algorithm for Finding All Root-to-Leaf Paths with a Given Sum

hashtag#Initialization:
 - Create a list `answer` to store all the valid paths that sum to `targetSum`.
 - Define a helper function `generateAllPathSum` to recursively explore the tree.

hashtag#Recursive Path Exploration**:
 - If the current node (`root`) is `null`, return immediately as there is no path to explore.
 - If the current node is a leaf (both left and right children are `null`):
 - Check if the node's value equals the `targetSum`. If it does:
 - Add the current node's value to the path.
 - Add a copy of this path to the `answer` list.
 - Backtrack by removing the last added node's value from the path.
 - Return to explore other paths.
 - Add the current node's value to the `pathValues` list.
 - Recursively explore the left subtree with the updated `targetSum`.
 - Recursively explore the right subtree with the updated `targetSum`.
 - Backtrack by removing the current node's value from the path after exploring both subtrees.

hashtag#Return the Result**:
 - After exploring all possible paths, return the `answer` list containing all valid paths that sum to `targetSum`.
1. What are the different http Methods?
2. What is the difference between get and post?
3. What will be the endpoint for get() to get a list of users and post() to add address for a particular user?
4. What sre the diffrent status codes? what is the difference between 400 and 500 status codes?
5. Authentication and authorization. After authenticating what you will store in the database?
6. what are http headers?
7. what are the different attacks that can happen to an application and how will you prevent from it?
8. SQL injection, etag
9. Difference between SQL and NoSQL.
10. mutex/lock
11. what is deadlock?


#Spring
1. What is Servlet and JSP?
2. What is Driver in JDBC?
ans:Driver is a software component that enables Java applications to interact with a specific database management system (DBMS). 
The driver acts as a bridge between the Java code and the database by translating Java calls into database-specific calls.
Key Points:
Purpose: A JDBC Driver provides the necessary implementation for the Java application to send SQL queries to the database, retrieve data, and handle database transactions.
Interface: The Driver interface in JDBC is part of the java.sql package and defines methods that the driver class must implement to communicate with the database.

3. What is the difference between Statement and prepare statement?

ans:In JDBC (Java Database Connectivity), both Statement and PreparedStatement are used to execute SQL queries. 
However, they differ in terms of functionality, performance, and security.

Statement is used when the SQL query is constructed manually and executed directly.
PreparedStatement allows you to precompile the SQL query and execute it multiple times with different parameters.
It also provides protection against SQL injection.

4. Why do we use Hibernate?
ans:Hibernate is a popular object-relational mapping (ORM) framework for Java that simplifies the interaction between Java applications and relational databases.
It provides a framework for mapping Java objects to database tables, allowing developers to work with databases in an object-oriented way without writing complex SQL queries.
Reasons to Use Hibernate
Simplifies Database Interactions
Hibernate eliminates the need to write repetitive and complex SQL queries for database CRUD (Create, Read, Update, Delete)
operations by providing an object-oriented approach to database interactions.
Object-Relational Mapping (ORM)
Hibernate maps Java classes to database tables and Java data types to SQL data types.
It allows developers to persist and retrieve Java objects directly from the database without manually writing SQL queries.
Automatic SQL Generation

5. What is Spring IOC container?
ans:The Spring IoC (Inversion of Control) Container is a core component of the Spring Framework that manages the creation,
configuration, and lifecycle of beans (Java objects) in a Spring application. 
6. What is Dispatcher servlet?
ans:The DispatcherServlet is a central component of the Spring MVC framework, 
responsible for managing the flow of HTTP requests and responses in a web application.

7. If you have to design a rest API from scratch what are the classes you will write?
ans:1. Controller Layer
Purpose: Handle HTTP requests and map them to specific endpoints.
Classes: Controller classes define the API endpoints and manage incoming HTTP requests (GET, POST, PUT, DELETE, etc.). 
These classes typically delegate tasks to service classes.

Service Layer
Purpose: Contains the business logic of the application.
Classes: Service classes handle business operations and interact with the data layer (repositories) to perform CRUD operations.

Purpose: Interacts with the database using Spring Data JPA or other data access technologies.
Classes: Repository interfaces handle database operations like fetching, saving, updating, and deleting data. 
Spring Data JPA simplifies database access by automatically implementing common CRUD operations.

1. Merge Two Sorted Lists 
https://lnkd.in/gDe2hB3s
2. Longest Substring Without Repeating Characters 
https://lnkd.in/ge5GKxTc
3. What is time and space complexity? why do we need time and space complexity?
ans:Time Complexity: Measures the computational time an algorithm takes relative to input size.
Space Complexity: Measures the memory an algorithm uses relative to input size.
Purpose: Both metrics are essential for evaluating the efficiency and scalability of algorithms, optimizing performance, and managing resources effectively
hashtag#Springboot:
1. What do you mean by Restful web services?
ans:RESTful web services are a way to design web services that follow REST principles, 
using HTTP methods to perform CRUD operations on resources identified by URLs. 
They are known for their simplicity, scalability, and ease of integration

2. How do you implement a Api from scratch? What are the class will be involved in your design?

3. What are the different methods you have used with rest Api? what are the diffeence between them?
ans:GET: Fetches data; no side effects on the server.
POST: Creates new resources or submits data; can have side effects (e.g., creating new records).
PUT: Updates or creates a resource; replaces the entire resource.
PATCH: Partially updates a resource; modifies only specified parts.
DELETE: Removes a resource; deletes the specified resource.

4. Which databse do you use ? Do you know any inbuilt methods available in JPA which allows to get user details?
ans:In JPA (Java Persistence API), you typically interact with a database through entity classes and repositories.
 JPA provides several inbuilt methods for querying and managing user details. Here’s an overview
Commonly Used Databases with JPA
MySQL: Popular open-source relational database.
PostgreSQL: Open-source relational database known for advanced features.
Oracle: Enterprise-level relational database with comprehensive features.
H2: Lightweight in-memory database often used for testing.
SQL Server: Microsoft’s relational database system.

Inbuilt Methods in JPA
1. CrudRepository
CrudRepository is a JPA repository interface that provides CRUD operations.
Common Methods:
findById(ID id): Retrieves an entity by its ID.
findAll(): Retrieves all entities.
save(S entity): Saves or updates an entity.
deleteById(ID id): Deletes an entity by its ID.
5. Do you write any custom query in your code? how do you do that?
6. How do you define relationship between Entity in spring boot? How to specify 1:1 relationship?

hashtag#Java:
1. What are the collections you have experienced with?
ans:
ArrayList: For scenarios where you need efficient access to elements by index.
LinkedList: For scenarios with frequent insertions and deletions.
HashSet: For scenarios where you need a set without duplicates and don't care about ordering.
TreeSet: For scenarios where you need a sorted set.
HashMap: For scenarios where you need efficient key-value lookups.
LinkedHashMap: For scenarios where you need to maintain insertion order.
PriorityQueue: For scenarios where you need elements to be processed based on priority.

2. If I need a data structure which prevent duplicate and maintain insertion order , what will be that ?
ans:If you need a data structure that prevents duplicates and maintains insertion order, the ideal choice is LinkedHashSet.
LinkedHashSet
Characteristics:
Prevents Duplicates: LinkedHashSet does not allow duplicate elements. If you try to add a duplicate element, it will not be added to the set.
Maintains Insertion Order: LinkedHashSet maintains the order in which elements are inserted. This is achieved by using a linked list to keep track of the insertion order.

hashtag#Project related questions:
1. What are the project you have worked on since starting of your carrier?
2. What is the current project you are working on? what is your roles and responsibilities , team size, what does your team do?
3. What are the services you provide to customer?
4. What is the data base you use for streaming media contents.
5. Is it a monolithic or Microservice system?
6. Do you have experience in deploying application at cloud?
7. What module or part of project you are working currently? Do you deploy them individually?

1. Searchin rotated sorted Array
https://lnkd.in/dX_nS58X
2. Write a recursive program to find power of 2 numbers, explain Time and Space complexity.

hashtag#Java
1. Why string class is immutable?
2. Give me a situation where you decide to create a immutable class.
ans:
Scenario: You are developing a financial application that handles transactions. 
Each transaction has a set of attributes such as amount, date, and transaction type. 
These attributes should not be changed once the transaction is created because the transaction’s integrity is crucial for financial records.

3. What are different ways we can break a singleton class.(serialization, cloning, Reflections)





